# config/nginx.conf : 실서비스 환경에서도 활용할 수 있습니다.
#  - 다른 리버스 프록시를 사용하셔도 됩니다.

server {
  listen 80;

  # /api, /admin, /blog, /djstatic, /media 등 장고에서 처리해야하는 요청은
  # 요청 URL로 매칭해서 뒷단의 장고 서버로 전달합니다.
  # 리액트의 create-react-app (이하 CRA)를 사용하실 때에는 CRA의 /static/ 경로와 겹치므로
  # 쉽게 변경할 수 있는 장고의 settings.STATIC_URL = "djstatic/" 설정 변경을 추천
  #  djstatic, media 경로는 실서비스에서는 nginx에서 정적파일을 직접 서빙토록 변경되어야 합니다.
  location ~* ^/(api|admin|blog|djstatic|media)/ { try_files $uri @proxy_to_django; }

  # 그 외 요청은 웹 프론트엔드 서버로 보냅니다.
  # 혹은 반대로 장고가 그 외 요청을 받고 웹 프론트엔드 서버에서 받을 요청만 명시하는 방식도 좋습니다.
  location / { try_files $uri $uri/ @proxy_to_front; }

  location @proxy_to_django {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://host.docker.internal:8000;  # 도커로 nginx를 구동할 경우
    # proxy_pass  http://127.0.0.1:8000;          # 서버에서 직접 nginx를 구동할 경우
  }

  location @proxy_to_front {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://host.docker.internal:3000;  # 도커로 nginx를 구동할 경우
    # proxy_pass  http://127.0.0.1:3000;          # 서버에서 직접 nginx를 구동할 경우
  }
}
